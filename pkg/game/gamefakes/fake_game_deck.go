// Code generated by counterfeiter. DO NOT EDIT.
package gamefakes

import (
	"sync"

	"example.com/pkg/game"
)

type FakeGameDeck struct {
	PopCardStub        func() (game.Card, error)
	popCardMutex       sync.RWMutex
	popCardArgsForCall []struct {
	}
	popCardReturns struct {
		result1 game.Card
		result2 error
	}
	popCardReturnsOnCall map[int]struct {
		result1 game.Card
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGameDeck) PopCard() (game.Card, error) {
	fake.popCardMutex.Lock()
	ret, specificReturn := fake.popCardReturnsOnCall[len(fake.popCardArgsForCall)]
	fake.popCardArgsForCall = append(fake.popCardArgsForCall, struct {
	}{})
	stub := fake.PopCardStub
	fakeReturns := fake.popCardReturns
	fake.recordInvocation("PopCard", []interface{}{})
	fake.popCardMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGameDeck) PopCardCallCount() int {
	fake.popCardMutex.RLock()
	defer fake.popCardMutex.RUnlock()
	return len(fake.popCardArgsForCall)
}

func (fake *FakeGameDeck) PopCardCalls(stub func() (game.Card, error)) {
	fake.popCardMutex.Lock()
	defer fake.popCardMutex.Unlock()
	fake.PopCardStub = stub
}

func (fake *FakeGameDeck) PopCardReturns(result1 game.Card, result2 error) {
	fake.popCardMutex.Lock()
	defer fake.popCardMutex.Unlock()
	fake.PopCardStub = nil
	fake.popCardReturns = struct {
		result1 game.Card
		result2 error
	}{result1, result2}
}

func (fake *FakeGameDeck) PopCardReturnsOnCall(i int, result1 game.Card, result2 error) {
	fake.popCardMutex.Lock()
	defer fake.popCardMutex.Unlock()
	fake.PopCardStub = nil
	if fake.popCardReturnsOnCall == nil {
		fake.popCardReturnsOnCall = make(map[int]struct {
			result1 game.Card
			result2 error
		})
	}
	fake.popCardReturnsOnCall[i] = struct {
		result1 game.Card
		result2 error
	}{result1, result2}
}

func (fake *FakeGameDeck) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.popCardMutex.RLock()
	defer fake.popCardMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGameDeck) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ game.GameDeck = new(FakeGameDeck)
