// Code generated by counterfeiter. DO NOT EDIT.
package gamefakes

import (
	"sync"

	"example.com/pkg/game"
)

type FakeGamePlayer struct {
	TakeStub        func(game.Card)
	takeMutex       sync.RWMutex
	takeArgsForCall []struct {
		arg1 game.Card
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGamePlayer) Take(arg1 game.Card) {
	fake.takeMutex.Lock()
	fake.takeArgsForCall = append(fake.takeArgsForCall, struct {
		arg1 game.Card
	}{arg1})
	stub := fake.TakeStub
	fake.recordInvocation("Take", []interface{}{arg1})
	fake.takeMutex.Unlock()
	if stub != nil {
		fake.TakeStub(arg1)
	}
}

func (fake *FakeGamePlayer) TakeCallCount() int {
	fake.takeMutex.RLock()
	defer fake.takeMutex.RUnlock()
	return len(fake.takeArgsForCall)
}

func (fake *FakeGamePlayer) TakeCalls(stub func(game.Card)) {
	fake.takeMutex.Lock()
	defer fake.takeMutex.Unlock()
	fake.TakeStub = stub
}

func (fake *FakeGamePlayer) TakeArgsForCall(i int) game.Card {
	fake.takeMutex.RLock()
	defer fake.takeMutex.RUnlock()
	argsForCall := fake.takeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGamePlayer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.takeMutex.RLock()
	defer fake.takeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGamePlayer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ game.GamePlayer = new(FakeGamePlayer)
